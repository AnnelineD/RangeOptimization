

def numberToBase(n, b):
    # numberToBase(1324, 10) = [1, 3, 2, 4]
    assert b > 0
    if n == 0:
        return [0]
    if b == 1:
        return [n]
    digits = []
    while n:
        digits.append(int(n % b))
        n //= b
    return digits[::-1]


def show_base(k):
    hex = "0123456789abcdef"
    hexagram = "䷁䷗䷆䷒䷎䷣䷭䷊䷏䷲䷧䷵䷽䷶䷟䷡䷇䷂䷜䷻䷦䷾䷯䷄䷬䷐䷮䷹䷞䷰䷛䷪䷖䷚䷃䷨䷳䷕䷑䷙䷢䷔䷿䷥䷷䷝䷱䷍䷓䷩䷺䷼䷴䷤䷸䷈䷋䷘䷅䷉䷠䷌䷫䷀"
    emoji = ['𖠀', '𖠁', '𖠂', '𖠃', '𖠄', '𖠅', '𖠆', '𖠇', '𖠈', '𖠉', '𖠊', '𖠋', '𖠌', '𖠍', '𖠎', '𖠏', '𖠐', '𖠑', '𖠒', '𖠓', '𖠔', '𖠕', '𖠖', '𖠗', '𖠘', '𖠙', '𖠚', '𖠛', '𖠜', '𖠝', '𖠞', '𖠟', '𖠠', '𖠡', '𖠢', '𖠣', '𖠤', '𖠥', '𖠦', '𖠧', '𖠨', '𖠩', '𖠪', '𖠫', '𖠬', '𖠭', '𖠮', '𖠯', '𖠰', '𖠱', '𖠲', '𖠳', '𖠴', '𖠵', '𖠶', '𖠷', '𖠸', '𖠹', '𖠺', '𖠻', '𖠼', '𖠽', '𖠾', '𖠿', '𖡀', '𖡁', '𖡂', '𖡃', '𖡄', '𖡅', '𖡆', '𖡇', '𖡈', '𖡉', '𖡊', '𖡋', '𖡌', '𖡍', '𖡎', '𖡏', '𖡐', '𖡑', '𖡒', '𖡓', '𖡔', '𖡕', '𖡖', '𖡗', '𖡘', '𖡙', '𖡚', '𖡛', '𖡜', '𖡝', '𖡞', '𖡟', '𖡠', '𖡡', '𖡢', '𖡣', '𖡤', '𖡥', '𖡦', '𖡧', '𖡨', '𖡩', '𖡪', '𖡫', '𖡬', '𖡭', '𖡮', '𖡯', '𖡰', '𖡱', '𖡲', '𖡳', '𖡴', '𖡵', '𖡶', '𖡷', '𖡸', '𖡹', '𖡺', '𖡻', '𖡼', '𖡽', '𖡾', '𖡿', '𖢀', '𖢁', '𖢂', '𖢃', '𖢄', '𖢅', '𖢆', '𖢇', '𖢈', '𖢉', '𖢊', '𖢋', '𖢌', '𖢍', '𖢎', '𖢏', '𖢐', '𖢑', '𖢒', '𖢓', '𖢔', '𖢕', '𖢖', '𖢗', '𖢘', '𖢙', '𖢚', '𖢛', '𖢜', '𖢝', '𖢞', '𖢟', '𖢠', '𖢡', '𖢢', '𖢣', '𖢤', '𖢥', '𖢦', '𖢧', '𖢨', '𖢩', '𖢪', '𖢫', '𖢬', '𖢭', '𖢮', '𖢯', '𖢰', '𖢱', '𖢲', '𖢳', '𖢴', '𖢵', '𖢶', '𖢷', '𖢸', '𖢹', '𖢺', '𖢻', '𖢼', '𖢽', '𖢾', '𖢿', '𖣀', '𖣁', '𖣂', '𖣃', '𖣄', '𖣅', '𖣆', '𖣇', '𖣈', '𖣉', '𖣊', '𖣋', '𖣌', '𖣍', '𖣎', '𖣏', '𖣐', '𖣑', '𖣒', '𖣓', '𖣔', '𖣕', '𖣖', '𖣗', '𖣘', '𖣙', '𖣚', '𖣛', '𖣜', '𖣝', '𖣞', '𖣟', '𖣠', '𖣡', '𖣢', '𖣣', '𖣤', '𖣥', '𖣦', '𖣧', '𖣨', '𖣩', '𖣪', '𖣫', '𖣬', '𖣭', '𖣮', '𖣯', '𖣰', '𖣱', '𖣲', '𖣳', '𖣴', '𖣵', '𖣶', '𖣷', '𖣸', '𖣹', '𖣺', '𖣻', '𖣼', '𖣽', '𖣾', '𖣿']
    return {16: lambda x: hex[x], 64: lambda x: hexagram[x], 256: lambda x: emoji[x]}.get(k, str)


def to_number(p: list[int], b) -> int:
    return sum((b**i)*e for i, e in enumerate(reversed(p)))


def to_number_special(p: list[int], o: int, base) -> int:
  # BASE = 10 => to_number_special([3, 2, 15], 1) = 3215
  # BASE = 10 => to_number_special([3, 2, 15], 2) = 32015
  return p[-1] + sum((base**(i + o + 1))*e for i, e in enumerate(reversed(p[:-1])))


def order(n, b):
  return len(numberToBase(n, b)) - 1


def to_size(l: list, s: int) -> list:
  return [0]*(s - len(l)) + l